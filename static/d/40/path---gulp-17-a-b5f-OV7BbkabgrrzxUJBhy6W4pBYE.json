{"data":{"markdownRemark":{"html":"<p>和grunt类似，gulp也是一个前端自动化构建工具。</p>\n<h4>与Grunt的比较</h4>\n<p>gulp和grunt最显著的区别就是gulp采用编码大于配置，而grunt相反配置大于编码。</p>\n<p>gulp是基于流的构建系统，相对更侧重各任务之间的衔接，而grunt侧重于一些通用的任务。</p>\n<p>另外gulp更易读，但是grunt相对插件要多。</p>\n<h4>安装与配置</h4>\n<p>安装全局gulp。</p>\n<p><code>$ npm install --global gulp</code></p>\n<p>创建项目，在项目目录下安装gulp。</p>\n<p><code>$ npm install --save-dev gulp</code></p>\n<p>创建gulpfile.js文件，配置gulp。</p>\n<pre><code class=\"language-javascript\">var gulp = require('gulp');\n\ngulp.task('default', function() {\n  // place code for your default task here\n});\n</code></pre>\n<p>运行gulp。</p>\n<p><code>$ gulp</code></p>\n<h4>定制简单的任务</h4>\n<p>这次的侧重点放在自动化任务上，而非gulp本身。</p>\n<p>首先说明下采用的目录结构为<code>app/css</code>下存放scss和css样式文件，<code>app/js</code>目录下存放js脚本文件，<code>app</code>根目录下存放html结构文件，在dist目录下存放build后的资源文件。</p>\n<p><strong>首先说明Build Css文件用到的一些插件：</strong></p>\n<p><strong>gulp-ruby-sass</strong>：用来将scss文件编译为css文件。</p>\n<p><strong>gulp-autoprefixer</strong>：用来给css样式自动添加浏览器前缀。</p>\n<p><strong>gulp-minify-css</strong>：用于css文件的压缩。</p>\n<p>流程如下：首先将css目录下scss文件编译为css文件，对css文件添加浏览器前缀，重命名为*.min.css，然后压缩输出到<code>dist/css</code>目录。</p>\n<pre><code class=\"language-javascript\">gulp.task('css', function() {\n  return sass('app/css/', { style: 'expanded' })\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    .pipe(gulp.dest('app/css'))\n    .pipe(rename({ suffix: '.min' }))\n    .pipe(minifycss())\n    .pipe(gulp.dest('dist/css'))\n    .pipe(livereload())\n    .pipe(notify({ message: 'css task complete' }));\n});\n</code></pre>\n<p><strong>然后说明Build Js文件用到的插件</strong></p>\n<p><strong>gulp-concat</strong>：用来合并文件，这里主要合并js文件。</p>\n<p><strong>gulp-uglify</strong>：混淆压缩js。</p>\n<p>流程如下：首先合并app目录下js文件（我这里想保留js目录结构所以注释掉了合并任务），修改前缀为*.min.js，执行混淆压缩命令 输出到<code>dist/js</code>目录。</p>\n<pre><code class=\"language-javascript\">gulp.task('js', function() {\n  return gulp.src('app/js/**/*.js')\n    //.pipe(concat('main.js'))\n    .pipe(gulp.dest('dist/js'))\n    .pipe(rename({ suffix: '.min' }))\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'))\n    .pipe(livereload())\n    .pipe(notify({ message: 'js task complete' }));\n});\n</code></pre>\n<p><strong>接下来说下非常有用的监视任务</strong></p>\n<p><strong>gulp-webserver</strong>：用于在本地启动Http服务。</p>\n<p><strong>gulp-livereload</strong>：livereload用于浏览器自动刷新。</p>\n<p>首先创建一个watch任务，监测所有资源文件是否发生修改，然后创建一个webserver任务，启动watch任务，webserver任务启动时会自动打开浏览器加载当前app目录下html文件，当watch任务监测到文件修改时就会通知livereload，浏览器就会实时刷新，省去了手动刷新的操作。</p>\n<pre><code class=\"language-javascript\">//Watch\ngulp.task('watch', function() {\n\n  // Watch .scss files\n  gulp.watch('app/css/**/*.scss', ['css']);\n  // Watch .js files\n  gulp.watch('app/js/**/*.js', ['js']);\n  // Watch image files\n  gulp.watch('app/images/**/*', ['images']);\n  // Create LiveReload server\n  livereload.listen();\n  // Watch any files in dist/, reload on change\n  gulp.watch(['dist/**']).on('change', livereload.changed);\n \n});\n</code></pre>\n<pre><code>//Server\ngulp.task('server', function() {\n  gulp.src('app')\n    .pipe(webserver({\n      livereload: true,\n      open: true\n    }));\n  gulp.start('watch');\n});\n</code></pre>\n<p><strong>最后说下clean任务</strong></p>\n<p>当你执行build任务，或者想删除build后的文件时，可以用del删除指定目录文件。</p>\n<pre><code class=\"language-javascript\">var del = require('del');\n// Clean\ngulp.task('clean', function(cb) {\n    del(['dist/','app/css/**/*.css'], cb)\n});\n</code></pre>\n<h4>有关于我的配置</h4>\n<p>可参考项目:[hellogulp][hellogulp]: <a href=\"https://github.com/dandananddada/hellogulp.git\">https://github.com/dandananddada/hellogulp.git</a>\n给出配置文件如下：</p>\n<pre><code class=\"language-javascript\">// Load plugins\nvar gulp = require('gulp'),\n    sass = require('gulp-ruby-sass'),\n    autoprefixer = require('gulp-autoprefixer'),\n    minifycss = require('gulp-minify-css'),\n    uglify = require('gulp-uglify'),\n    imagemin = require('gulp-imagemin'),\n    rename = require('gulp-rename'),\n    concat = require('gulp-concat'),\n    notify = require('gulp-notify'),\n    cache = require('gulp-cache'),\n    livereload = require('gulp-livereload'),\n    webserver = require('gulp-webserver'),\n    del = require('del');\n\n//html\ngulp.task('html', function() {\n    return gulp.src(\"app/*.html\")\n        .pipe(gulp.dest('dist/'))\n        .pipe(livereload())\n        .pipe(notify({ message: 'html task complete' }));\n}); \n\n// css\ngulp.task('css', function() {\n  return sass('app/css/', { style: 'expanded' })\n    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))\n    .pipe(gulp.dest('app/css'))\n    .pipe(rename({ suffix: '.min' }))\n    .pipe(minifycss())\n    .pipe(gulp.dest('dist/css'))\n    .pipe(livereload())\n    .pipe(notify({ message: 'css task complete' }));\n});\n \n// js\ngulp.task('js', function() {\n  return gulp.src('app/js/**/*.js')\n    //.pipe(concat('main.js'))\n    .pipe(gulp.dest('dist/js'))\n    .pipe(rename({ suffix: '.min' }))\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'))\n    .pipe(livereload())\n    .pipe(notify({ message: 'js task complete' }));\n});\n \n// Images\ngulp.task('images', function() {\n  return gulp.src('app/images/**/*')\n    .pipe(cache(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true })))\n    .pipe(gulp.dest('dist/images'))\n    .pipe(livereload())\n    .pipe(notify({ message: 'Images task complete' }));\n});\n\n// Clean\ngulp.task('clean', function(cb) {\n    del(['dist/','app/css/**/*.css'], cb)\n});\n \n \n// Watch\ngulp.task('watch', function() {\n\n  //Watch .html files\n  gulp.watch('app/**/*.html', ['html']);\n\n  // Watch .scss files\n  gulp.watch('app/css/**/*.scss', ['css']);\n \n  // Watch .js files\n  gulp.watch('app/js/**/*.js', ['js']);\n \n  // Watch image files\n  gulp.watch('app/images/**/*', ['images']);\n \n  // Create LiveReload server\n  livereload.listen();\n \n  // Watch any files in dist/, reload on change\n  gulp.watch(['dist/**']).on('change', livereload.changed);\n \n});\n\n//Build\ngulp.task('build', ['clean'], function() {\n    gulp.start('html','css', 'js', 'images');\n});\n\n//Server\ngulp.task('server', function() {\n  gulp.src('app')\n    .pipe(webserver({\n      livereload: true,\n      open: true\n    }));\n  gulp.start('watch');\n});\n\n// Default task\ngulp.task('default', ['build']);\n</code></pre>","frontmatter":{"date":"May 07, 2015","path":"/gulp","title":"gulp"}}},"pageContext":{}}