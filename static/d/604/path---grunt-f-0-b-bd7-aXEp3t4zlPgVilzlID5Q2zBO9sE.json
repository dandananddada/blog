{"data":{"markdownRemark":{"html":"<p>Grunt是一个JavaScript构建工具。</p>\n<h5>【1】Install Grunt</h5>\n<p>在安装Grunt前需要安装node NPM。\n首先全局安装grunt-cli（grunt-cli为grunt的命令工具）。</p>\n<p><code>$ npm install -g grunt-cli</code></p>\n<p>然后在开发的项目目录下安装grunt。</p>\n<p> <code>$ npm install grunt</code></p>\n<p>通过\"—version\"命令查看当前cli和grunt版本</p>\n<p><code>$ grunt —version</code></p>\n<p>通过git安装模板插件</p>\n<p><code>$ git clone https://github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntplugin</code></p>\n<p>通过grunt-init --help命令可以查看到Available templates，当前安装的模板名称为gruntplugin。\n安装grunt常用的插件。</p>\n<p><code>$ npm install grunt-contrib-uglify</code> </p>\n<p><code>$ npm install grunt-contrib-concat</code> </p>\n<p><code>$ npm install grunt-contrib-watch</code></p>\n<p>以上基本需要安装的东西都完成了，接下来进行配置。\n当然这里你也可以不单独安装需要的plugin，而是通过npm install 命令直接安装package.json文件中引入的全部plugins。</p>\n<p>【2】Set Grunt Config\nGrunt项目需要package.json和Gruntfile.js/Gruntfile.coffee这两个配置文件。其中package.json定义了项目中需要引入的plugins，Gruntfile.js定义了Grunt的配置信息。\n首先通过grunt-init [模板名]创建Gruntfile.js文件和package.json文件。</p>\n<p><code>$ grunt-init gruntplugin</code></p>\n<p>接下来通过npm init命令根据提示输入项目相关相应参数，完善package.json文件。</p>\n<p><code>$ npm init</code></p>\n<p>这里也可以clone我使用的项目</p>\n<p><code>$ git clone https://github.com/dandananddada/helloGrunt.git</code></p>\n<p>然后在根目录下执行</p>\n<p><code>$ npm install</code></p>\n<p>接下来就可以通过Grunt的命令查看定义的Task，并且执行相应任务了。\n具体任务相关数据配置的说明可参考官网，不在这里细说了。</p>\n<p><a href=\"http://gruntjs.com/configuring-tasks\">http://gruntjs.com/configuring-tasks</a></p>\n<p>【附录】Gruntfile.js</p>\n<pre><code class=\"language-javascript\">module.exports = function(grunt) {\n\n    var config = {\n        app: 'app',\n        dist: 'dist'\n    };\n\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        config: config,\n        //sass->css编译插件\n        sass: {\n            options: {\n                sourceMap: false\n            },\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '&#x3C;%= config.app %>/styles/sass',\n                    src: ['*.scss'],\n                    dest: 'app/styles/',\n                    ext: '.css'\n                }]\n            }\n        },\n        //清除build后生成的文件（清空dist目录）\n        clean: {\n            dist: {\n                files: [{\n                      dot: true,\n                      src: [\n                          '.tmp',\n                          '&#x3C;%= config.dist %>/*',\n                          '!&#x3C;%= config.dist %>/.git*'\n                      ]\n                }]\n            },\n        },\n        //合并js和css文件\n        concat: {\n            js: {\n                src: ['&#x3C;%= config.app %>/js/**/*.js'],\n                dest: '&#x3C;%= config.dist %>/combine/&#x3C;%= pkg.name %>.js'\n            },\n            css: {\n                src: ['&#x3C;%= config.app %>/styles/**/*.css'],\n                dest: '&#x3C;%= config.dist %>/combine/&#x3C;%= pkg.name %>.css'  \n            }\n        },\n        // 压缩css文件\n        cssmin: {\n            // 保持目录结构压缩\n            compress: {\n                files: [{\n                      expand: true,\n                      cwd: '&#x3C;%= config.app %>/styles/',\n                      src: ['*.css', '!*.min.css'],\n                      dest: '&#x3C;%= config.dist %>/release/css/',\n                      ext: '.min.css'\n                    }]\n            },\n            // 合并为一个文件后压缩\n            build: {\n                files: [{\n                      expand: true,\n                      cwd: '&#x3C;%= config.dist %>/combine/',\n                      src: ['*.css', '!*.min.css'],\n                      dest: '&#x3C;%= config.dist %>/release',\n                      ext: '.min.css'\n                    }]\n            }\n        },\n        // 压缩js文件\n        uglify: {\n            options: {\n            banner: '/*! &#x3C;%= pkg.name %> &#x3C;%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n            },\n            // 保持目录结构压缩\n            compress: {\n                options: {\n                    mangle: true,\n                    compress: {\n                        drop_console: true\n                    },\n                    report: \"min\"\n                },\n                files: [{\n                    expand: true,\n                    cwd: '&#x3C;%= config.app %>/js',\n                    src: '**/*.js',\n                    dest: '&#x3C;%= config.dist %>/release/js',\n                    ext: '.min.js'\n                }]\n            },\n            // 合并为一个文件后压缩\n            build: {\n                options: {\n                    mangle: true,\n                    compress: {\n                        drop_console: true\n                    },\n                    report: \"min\"\n                },\n                files: [{\n                    expand: true,\n                    cwd: '&#x3C;%= config.dist %>/combine',\n                    src: '**/*.js',\n                    dest: '&#x3C;%= config.dist %>/release',\n                    ext: '.min.js'\n                }]\n            }\n        },\n        // 配置ctrl+s触发任务\n        watch: {\n            compile: {\n                files: ['&#x3C;%= config.app %>/styles/sass/**/*.scss'],\n                tasks: ['sass'],\n            },\n            livereload: {\n                options: {\n                    livereload: '&#x3C;%= connect.options.livereload %>'\n                },\n                files: [\n                    '&#x3C;%= config.app %>/{,*/}*.html',\n                    '&#x3C;%= config.app %>/{,*/}*.css',\n                    '&#x3C;%= config.app %>/images/{,*/}*'\n                ]\n            }\n        },\n        // 将当前站点作为服务器启动\n        connect: {\n            options: {\n                port: 9001,\n                open: true,\n                livereload: 35729,\n                hostname: 'localhost'\n            },\n            livereload: {\n                options: {\n                    middleware: function(connect) {\n                        return [\n                            connect.static(config.app)\n                        ];\n                    }\n                }\n            }\n        },\n        // 针对测试作为服务启动\n        karma: {\n            unit: {\n                configFile: 'karma.conf.js'\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-sass');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-concat');\n    grunt.loadNpmTasks('grunt-contrib-cssmin');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-connect');\n    grunt.loadNpmTasks('grunt-karma');\n\n    // 将sass文件编译为css文件\n    grunt.registerTask('compile', ['sass']);\n    // 清理dist目录\n    // grunt clean,grunt-contrib-clean内置任务\n    // 分别合并js和css文件为一个文件\n    grunt.registerTask('combine',['compile','concat:css','concat:js']);\n    // 保持原目录结构压缩css文件和js文件\n    grunt.registerTask('compress',['compile','cssmin:compress','uglify:compress']);\n    // 部署js文件和css文件（分别将js和css文件合并压缩为一个文件）\n    grunt.registerTask('build',['clean:dist','compile','combine','cssmin:build','uglify:build']);\n    //将当前站点作为服务启动\n    grunt.registerTask('server', ['connect:livereload','watch','watch:compile']);\n    // 启动js单元测试服务\n    grunt.registerTask('test', ['karma']);\n    // 设置grunt默认任务为server\n    grunt.registerTask('default', ['server']);\n};\n</code></pre>","frontmatter":{"date":"October 23, 2014","path":"/grunt","title":"Grunt"}}},"pageContext":{}}